// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sdk.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 排序方向
type SortDirection int32

const (
	SortDirection_Asc  SortDirection = 0
	SortDirection_Desc SortDirection = 1
)

var SortDirection_name = map[int32]string{
	0: "Asc",
	1: "Desc",
}

var SortDirection_value = map[string]int32{
	"Asc":  0,
	"Desc": 1,
}

func (x SortDirection) String() string {
	return proto.EnumName(SortDirection_name, int32(x))
}

func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_70decb0fb6f436df, []int{0}
}

type EnableStatus int32

const (
	EnableStatus_EnableStatusDisabled EnableStatus = 0
	EnableStatus_EnableStatusEnabled  EnableStatus = 1
)

var EnableStatus_name = map[int32]string{
	0: "EnableStatusDisabled",
	1: "EnableStatusEnabled",
}

var EnableStatus_value = map[string]int32{
	"EnableStatusDisabled": 0,
	"EnableStatusEnabled":  1,
}

func (x EnableStatus) String() string {
	return proto.EnumName(EnableStatus_name, int32(x))
}

func (EnableStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_70decb0fb6f436df, []int{1}
}

type VerifyStatus int32

const (
	VerifyStatus_VerifyStatusUnverified VerifyStatus = 0
	VerifyStatus_VerifyStatusVerified   VerifyStatus = 1
)

var VerifyStatus_name = map[int32]string{
	0: "VerifyStatusUnverified",
	1: "VerifyStatusVerified",
}

var VerifyStatus_value = map[string]int32{
	"VerifyStatusUnverified": 0,
	"VerifyStatusVerified":   1,
}

func (x VerifyStatus) String() string {
	return proto.EnumName(VerifyStatus_name, int32(x))
}

func (VerifyStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_70decb0fb6f436df, []int{2}
}

type BoolValue int32

const (
	BoolValue_BoolValueFalse BoolValue = 0
	BoolValue_BoolValueTrue  BoolValue = 1
)

var BoolValue_name = map[int32]string{
	0: "BoolValueFalse",
	1: "BoolValueTrue",
}

var BoolValue_value = map[string]int32{
	"BoolValueFalse": 0,
	"BoolValueTrue":  1,
}

func (x BoolValue) String() string {
	return proto.EnumName(BoolValue_name, int32(x))
}

func (BoolValue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_70decb0fb6f436df, []int{3}
}

type DaprModuleKind int32

const (
	DaprModuleKind_DaprModuleKindUnknown    DaprModuleKind = 0
	DaprModuleKind_DaprModuleKindInvocation DaprModuleKind = 1
	DaprModuleKind_DaprModuleKindEvent      DaprModuleKind = 2
	DaprModuleKind_DaprModuleKindDelayEvent DaprModuleKind = 3
	DaprModuleKind_DaprModuleKindHealth     DaprModuleKind = 4
)

var DaprModuleKind_name = map[int32]string{
	0: "DaprModuleKindUnknown",
	1: "DaprModuleKindInvocation",
	2: "DaprModuleKindEvent",
	3: "DaprModuleKindDelayEvent",
	4: "DaprModuleKindHealth",
}

var DaprModuleKind_value = map[string]int32{
	"DaprModuleKindUnknown":    0,
	"DaprModuleKindInvocation": 1,
	"DaprModuleKindEvent":      2,
	"DaprModuleKindDelayEvent": 3,
	"DaprModuleKindHealth":     4,
}

func (x DaprModuleKind) String() string {
	return proto.EnumName(DaprModuleKind_name, int32(x))
}

func (DaprModuleKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_70decb0fb6f436df, []int{4}
}

// 按limit分页
type ListParam struct {
	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (m *ListParam) Reset()         { *m = ListParam{} }
func (m *ListParam) String() string { return proto.CompactTextString(m) }
func (*ListParam) ProtoMessage()    {}
func (*ListParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_70decb0fb6f436df, []int{0}
}
func (m *ListParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListParam.Merge(m, src)
}
func (m *ListParam) XXX_Size() int {
	return m.Size()
}
func (m *ListParam) XXX_DiscardUnknown() {
	xxx_messageInfo_ListParam.DiscardUnknown(m)
}

var xxx_messageInfo_ListParam proto.InternalMessageInfo

func (m *ListParam) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListParam) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// 按last primary key分页
type NextParam struct {
	LastPk    int64         `protobuf:"varint,1,opt,name=lastPk,proto3" json:"lastPk,omitempty"`
	PageSize  int64         `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Direction SortDirection `protobuf:"varint,3,opt,name=direction,proto3,enum=hdget.protobuf.SortDirection" json:"direction,omitempty"`
}

func (m *NextParam) Reset()         { *m = NextParam{} }
func (m *NextParam) String() string { return proto.CompactTextString(m) }
func (*NextParam) ProtoMessage()    {}
func (*NextParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_70decb0fb6f436df, []int{1}
}
func (m *NextParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextParam.Merge(m, src)
}
func (m *NextParam) XXX_Size() int {
	return m.Size()
}
func (m *NextParam) XXX_DiscardUnknown() {
	xxx_messageInfo_NextParam.DiscardUnknown(m)
}

var xxx_messageInfo_NextParam proto.InternalMessageInfo

func (m *NextParam) GetLastPk() int64 {
	if m != nil {
		return m.LastPk
	}
	return 0
}

func (m *NextParam) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *NextParam) GetDirection() SortDirection {
	if m != nil {
		return m.Direction
	}
	return SortDirection_Asc
}

type DaprHandler struct {
	ModuleKind  DaprModuleKind    `protobuf:"varint,1,opt,name=moduleKind,proto3,enum=hdget.protobuf.DaprModuleKind" json:"moduleKind,omitempty"`
	PkgPath     string            `protobuf:"bytes,2,opt,name=pkgPath,proto3" json:"pkgPath,omitempty"`
	Module      string            `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
	Name        string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Alias       string            `protobuf:"bytes,5,opt,name=alias,proto3" json:"alias,omitempty"`
	Annotations map[string]string `protobuf:"bytes,7,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Comments    []string          `protobuf:"bytes,6,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (m *DaprHandler) Reset()         { *m = DaprHandler{} }
func (m *DaprHandler) String() string { return proto.CompactTextString(m) }
func (*DaprHandler) ProtoMessage()    {}
func (*DaprHandler) Descriptor() ([]byte, []int) {
	return fileDescriptor_70decb0fb6f436df, []int{2}
}
func (m *DaprHandler) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DaprHandler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DaprHandler.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DaprHandler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaprHandler.Merge(m, src)
}
func (m *DaprHandler) XXX_Size() int {
	return m.Size()
}
func (m *DaprHandler) XXX_DiscardUnknown() {
	xxx_messageInfo_DaprHandler.DiscardUnknown(m)
}

var xxx_messageInfo_DaprHandler proto.InternalMessageInfo

func (m *DaprHandler) GetModuleKind() DaprModuleKind {
	if m != nil {
		return m.ModuleKind
	}
	return DaprModuleKind_DaprModuleKindUnknown
}

func (m *DaprHandler) GetPkgPath() string {
	if m != nil {
		return m.PkgPath
	}
	return ""
}

func (m *DaprHandler) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *DaprHandler) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DaprHandler) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *DaprHandler) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *DaprHandler) GetComments() []string {
	if m != nil {
		return m.Comments
	}
	return nil
}

func init() {
	proto.RegisterEnum("hdget.protobuf.SortDirection", SortDirection_name, SortDirection_value)
	proto.RegisterEnum("hdget.protobuf.EnableStatus", EnableStatus_name, EnableStatus_value)
	proto.RegisterEnum("hdget.protobuf.VerifyStatus", VerifyStatus_name, VerifyStatus_value)
	proto.RegisterEnum("hdget.protobuf.BoolValue", BoolValue_name, BoolValue_value)
	proto.RegisterEnum("hdget.protobuf.DaprModuleKind", DaprModuleKind_name, DaprModuleKind_value)
	proto.RegisterType((*ListParam)(nil), "hdget.protobuf.ListParam")
	proto.RegisterType((*NextParam)(nil), "hdget.protobuf.NextParam")
	proto.RegisterType((*DaprHandler)(nil), "hdget.protobuf.DaprHandler")
	proto.RegisterMapType((map[string]string)(nil), "hdget.protobuf.DaprHandler.AnnotationsEntry")
}

func init() { proto.RegisterFile("sdk.proto", fileDescriptor_70decb0fb6f436df) }

var fileDescriptor_70decb0fb6f436df = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x6f, 0xd3, 0x4c,
	0x10, 0xc6, 0xbd, 0x71, 0xfa, 0xc7, 0xd3, 0x36, 0xda, 0x77, 0xdf, 0x52, 0x4c, 0x05, 0x56, 0x94,
	0x53, 0x14, 0xa1, 0x54, 0x0a, 0x17, 0xd4, 0x4a, 0x95, 0x5a, 0xb9, 0xa8, 0x08, 0xa8, 0x2a, 0x87,
	0xe6, 0xc0, 0x6d, 0x63, 0x6f, 0x13, 0x2b, 0xf6, 0x6e, 0x64, 0xaf, 0x03, 0x41, 0x7c, 0x08, 0xce,
	0x7c, 0x22, 0x8e, 0xbd, 0x20, 0x71, 0x44, 0xc9, 0x17, 0x41, 0xbb, 0x76, 0x52, 0xbb, 0x20, 0x4e,
	0x9e, 0xdf, 0x3c, 0x33, 0xa3, 0x67, 0xc6, 0x0b, 0x56, 0x1a, 0x4c, 0xba, 0xd3, 0x44, 0x48, 0x41,
	0x1a, 0xe3, 0x60, 0xc4, 0x64, 0x0e, 0xc3, 0xec, 0xb6, 0x75, 0x02, 0xd6, 0xdb, 0x30, 0x95, 0xd7,
	0x34, 0xa1, 0x31, 0x21, 0x50, 0x9f, 0xd2, 0x11, 0xb3, 0x51, 0x13, 0xb5, 0x4d, 0x4f, 0xc7, 0xe4,
	0x10, 0xb6, 0xd5, 0xb7, 0x1f, 0x7e, 0x66, 0x76, 0x4d, 0xe7, 0xd7, 0xdc, 0xfa, 0x02, 0xd6, 0x15,
	0xfb, 0x54, 0x34, 0x1f, 0xc0, 0x66, 0x44, 0x53, 0x79, 0x3d, 0x29, 0xda, 0x0b, 0xfa, 0xd7, 0x00,
	0x72, 0x02, 0x56, 0x10, 0x26, 0xcc, 0x97, 0xa1, 0xe0, 0xb6, 0xd9, 0x44, 0xed, 0x46, 0xef, 0x59,
	0xb7, 0xea, 0xb0, 0xdb, 0x17, 0x89, 0x74, 0x57, 0x45, 0xde, 0x7d, 0x7d, 0xeb, 0x47, 0x0d, 0x76,
	0x5c, 0x3a, 0x4d, 0x2e, 0x29, 0x0f, 0x22, 0x96, 0x90, 0x53, 0x80, 0x58, 0x04, 0x59, 0xc4, 0xde,
	0x84, 0x3c, 0xd0, 0x26, 0x1a, 0x3d, 0xe7, 0xe1, 0x34, 0xd5, 0xf0, 0x6e, 0x5d, 0xe5, 0x95, 0x3a,
	0x88, 0x0d, 0x5b, 0xd3, 0xc9, 0xe8, 0x9a, 0xca, 0xb1, 0xf6, 0x69, 0x79, 0x2b, 0x54, 0xab, 0xe5,
	0x75, 0xda, 0xa3, 0xe5, 0x15, 0xa4, 0xee, 0xc5, 0x69, 0xcc, 0xec, 0xba, 0xce, 0xea, 0x98, 0xec,
	0xc3, 0x06, 0x8d, 0x42, 0x9a, 0xda, 0x1b, 0x3a, 0x99, 0x03, 0xb9, 0x82, 0x1d, 0xca, 0xb9, 0x90,
	0x54, 0x39, 0x4f, 0xed, 0xad, 0xa6, 0xd9, 0xde, 0xe9, 0x3d, 0xff, 0x9b, 0xb9, 0x62, 0x9b, 0xee,
	0xd9, 0x7d, 0xf9, 0x05, 0x97, 0xc9, 0xdc, 0x2b, 0x0f, 0x50, 0x47, 0xf5, 0x45, 0x1c, 0x33, 0x2e,
	0x53, 0x7b, 0xb3, 0x69, 0xb6, 0x2d, 0x6f, 0xcd, 0x87, 0xa7, 0x80, 0x1f, 0x36, 0x13, 0x0c, 0xe6,
	0x84, 0xcd, 0xf5, 0x51, 0x2c, 0x4f, 0x85, 0xca, 0xe7, 0x8c, 0x46, 0x19, 0x2b, 0x76, 0xcd, 0xe1,
	0xb8, 0xf6, 0x12, 0x75, 0x5a, 0xb0, 0x57, 0xb9, 0x39, 0xd9, 0x02, 0xf3, 0x2c, 0xf5, 0xb1, 0x41,
	0xb6, 0xa1, 0xee, 0xb2, 0xd4, 0xc7, 0xa8, 0x73, 0x06, 0xbb, 0x17, 0x9c, 0x0e, 0x23, 0xd6, 0x97,
	0x54, 0x66, 0x29, 0xb1, 0x61, 0xbf, 0xcc, 0x6e, 0x98, 0x2a, 0x08, 0xb0, 0x41, 0x1e, 0xc3, 0xff,
	0x65, 0x25, 0x8f, 0x03, 0x8c, 0x3a, 0x2e, 0xec, 0x0e, 0x58, 0x12, 0xde, 0xce, 0x8b, 0x11, 0x87,
	0x70, 0x50, 0xe6, 0x1b, 0x3e, 0x53, 0x14, 0xea, 0x21, 0x36, 0xec, 0x97, 0xb5, 0xc1, 0x4a, 0x41,
	0x9d, 0x1e, 0x58, 0xe7, 0x42, 0x44, 0x03, 0xe5, 0x9e, 0x10, 0x68, 0xac, 0xe1, 0x15, 0x8d, 0x52,
	0x86, 0x0d, 0xf2, 0x1f, 0xec, 0xad, 0x73, 0xef, 0x93, 0x8c, 0x61, 0xd4, 0xf9, 0x86, 0xa0, 0x51,
	0x7d, 0x07, 0xe4, 0x09, 0x3c, 0xaa, 0x66, 0x6e, 0xf8, 0x84, 0x8b, 0x8f, 0x1c, 0x1b, 0xe4, 0x29,
	0xd8, 0x55, 0xe9, 0x35, 0x9f, 0x09, 0x5f, 0x1f, 0x17, 0x23, 0xb5, 0x5e, 0x55, 0xbd, 0x98, 0x31,
	0x2e, 0x71, 0xed, 0xcf, 0x36, 0x97, 0x45, 0x74, 0x9e, 0xab, 0xa6, 0x5a, 0xa8, 0xaa, 0x5e, 0x32,
	0x1a, 0xc9, 0x31, 0xae, 0x9f, 0x1f, 0x7f, 0x5f, 0x38, 0xe8, 0x6e, 0xe1, 0xa0, 0x5f, 0x0b, 0x07,
	0x7d, 0x5d, 0x3a, 0xc6, 0xdd, 0xd2, 0x31, 0x7e, 0x2e, 0x1d, 0xe3, 0x43, 0x73, 0x14, 0xca, 0x71,
	0x36, 0xec, 0xfa, 0x22, 0x3e, 0xd2, 0x0f, 0xe7, 0x48, 0xfd, 0x72, 0xc1, 0x8f, 0x56, 0xef, 0x67,
	0xb8, 0xa9, 0xa3, 0x17, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x58, 0xae, 0x0c, 0xa8, 0xf0, 0x03,
	0x00, 0x00,
}

func (m *ListParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintSdk(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintSdk(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NextParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Direction != 0 {
		i = encodeVarintSdk(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x18
	}
	if m.PageSize != 0 {
		i = encodeVarintSdk(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.LastPk != 0 {
		i = encodeVarintSdk(dAtA, i, uint64(m.LastPk))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DaprHandler) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaprHandler) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DaprHandler) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintSdk(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSdk(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSdk(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Comments[iNdEx])
			copy(dAtA[i:], m.Comments[iNdEx])
			i = encodeVarintSdk(dAtA, i, uint64(len(m.Comments[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintSdk(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSdk(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintSdk(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PkgPath) > 0 {
		i -= len(m.PkgPath)
		copy(dAtA[i:], m.PkgPath)
		i = encodeVarintSdk(dAtA, i, uint64(len(m.PkgPath)))
		i--
		dAtA[i] = 0x12
	}
	if m.ModuleKind != 0 {
		i = encodeVarintSdk(dAtA, i, uint64(m.ModuleKind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSdk(dAtA []byte, offset int, v uint64) int {
	offset -= sovSdk(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovSdk(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovSdk(uint64(m.PageSize))
	}
	return n
}

func (m *NextParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastPk != 0 {
		n += 1 + sovSdk(uint64(m.LastPk))
	}
	if m.PageSize != 0 {
		n += 1 + sovSdk(uint64(m.PageSize))
	}
	if m.Direction != 0 {
		n += 1 + sovSdk(uint64(m.Direction))
	}
	return n
}

func (m *DaprHandler) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleKind != 0 {
		n += 1 + sovSdk(uint64(m.ModuleKind))
	}
	l = len(m.PkgPath)
	if l > 0 {
		n += 1 + l + sovSdk(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovSdk(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSdk(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovSdk(uint64(l))
	}
	if len(m.Comments) > 0 {
		for _, s := range m.Comments {
			l = len(s)
			n += 1 + l + sovSdk(uint64(l))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSdk(uint64(len(k))) + 1 + len(v) + sovSdk(uint64(len(v)))
			n += mapEntrySize + 1 + sovSdk(uint64(mapEntrySize))
		}
	}
	return n
}

func sovSdk(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSdk(x uint64) (n int) {
	return sovSdk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSdk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSdk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPk", wireType)
			}
			m.LastPk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPk |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= SortDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSdk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSdk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DaprHandler) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaprHandler: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaprHandler: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleKind", wireType)
			}
			m.ModuleKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleKind |= DaprModuleKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkgPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSdk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSdk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PkgPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSdk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSdk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSdk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSdk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSdk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSdk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSdk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSdk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSdk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSdk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSdk
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSdk
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSdk
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSdk
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSdk
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSdk
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSdk
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSdk(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSdk
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSdk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSdk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSdk(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSdk
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSdk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSdk
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSdk
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSdk
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSdk        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSdk          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSdk = fmt.Errorf("proto: unexpected end of group")
)
